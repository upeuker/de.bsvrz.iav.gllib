<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="distribution.vrz3" default="all" basedir="../">

	<!-- - - - - - - - - - - - - - Properties - - - - - - - - - - - - - - - -->

	<property file="ant/build.properties" />

	<property name="junit.jar" value="lib/junit-4.1.jar" description="Pfad zu JUnit4" />

	<!-- - - - - - - - - - - - - Task Definition - - - - - - - - - - - - - - -->

	<taskdef resource="checkstyletask.properties">
		<classpath path="lib/checkstyle-all-4.3.jar" />
	</taskdef>

	<target name="check">
		<checkstyle config="lib/sun_checks.xml">
			<fileset dir="src" includes="**/*.java" />
		</checkstyle>
	</target>

	<!-- - - - - - - - - - - - - - - Targets - - - - - - - - - - - - - - - - -->

	<target name="all" depends="entfernen, vorbereitung" description="Alles erstellen: Release und JUnit">
		<antcall target="release" />
		<antcall target="junit" />
		<antcall target="res" />
		<zip basedir="${out.dir}" includes="${swe.id}/**" compress="yes" destfile="${out.dir}/${swe.id}_V${swe.version}.zip" />
	</target>

	<target name="clean" description="Temporäre Dateien entfernen">
		<delete dir="${tmp.dir}" />
	</target>

	<target name="entfernen" depends="clean" description="Alle erzeugten Dateien löschen">
		<delete dir="${out.dir}" />
		<delete dir="${doc.dir}" />
	</target>

	<target name="vorbereitung" description="Leistet notwendige Vorarbeiten">
		<mkdir dir="${out.dir}/${swe.id}" />
		<mkdir dir="${doc.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<target name="release" depends="vorbereitung" description="Erstellt nur die Release-Dateien">
		<parallel threadcount="3" failonany="yes">
			<antcall target="release.jar" />
			<antcall target="release.source" />
			<sequential>
				<antcall target="release.javadoc.api" />
				<zip basedir="${doc.dir}" includes="api/**" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-doc-api.zip" />
			</sequential>
			<sequential>
				<antcall target="release.javadoc.design" />
				<zip basedir="${doc.dir}" includes="design/**" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-doc-design.zip" />
			</sequential>
		</parallel>
		<antcall target="clean" />
	</target>

	<target name="release.jar" description="Erstellt das jar-File aus den Quellen" depends="vorbereitung">
		<mkdir dir="${tmp.dir}/bin" />
		<javac debug="off" destdir="${tmp.dir}/bin" target="1.5">
			<classpath path="${classpath}" />
			<src path="${src.dir}" />
		</javac>
		<tstamp />
		<filter token="Version" value="${swe.version} (${DSTAMP}-${TSTAMP})" />
		<filter token="Title" value="${swe.name}" />
		<copy file="ant/MANIFEST.MF" todir="${tmp.dir}" filtering="true" />
		<copy file="ant/LiesMich.txt" todir="${out.dir}/${swe.id}" filtering="true" />
		<copy file="lib/gpl.txt" tofile="${out.dir}/${swe.id}/${swe.id}-GPL-Lizenz.txt" />
		<copy todir="${tmp.dir}/bin">
			<fileset dir="${src.dir}">
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<jar basedir="${tmp.dir}/bin" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}.jar" manifest="${tmp.dir}/MANIFEST.MF" excludes="**/package-info.class" index="yes" />
	</target>

	<target name="release.source" description="Packt die Quelldateien">
		<zip basedir="${src.dir}" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-src.zip">
		</zip>
	</target>

	<target name="release.javadoc.api" description="API-Dokumentation erstellen">
		<javadoc overview="${src.dir}/overview.html"
		         access="protected"
		         author="true"
		         classpath="${classpath}"
		         destdir="${doc.dir}/api"
		         doctitle="API-Dokumentation für die ${swe.name}"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         packagenames="${swe.id}.*"
		         source="1.5"
		         sourcepath="${src.dir};${src.dir.extra}"
		         splitindex="true"
		         use="true"
		         version="true"
		         link="http://java.sun.com/j2se/1.5.0/docs/api/"
		/>
	</target>

	<target name="release.javadoc.design" description="Gesamte Dokumentation erstellen">
		<javadoc overview="${src.dir}/overview.html"
		         access="private"
		         author="true"
		         classpath="${classpath}"
		         destdir="${doc.dir}/design"
		         doctitle="Design-Dokumentation für die ${swe.name}"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         packagenames="${swe.id}.*"
		         source="1.5"
		         sourcepath="${src.dir};${src.dir.extra}"
		         splitindex="true"
		         use="true"
		         version="true"
		         link="http://java.sun.com/j2se/1.5.0/docs/api/"
		/>
	</target>

	<target name="junit" depends="vorbereitung" description="Erstellt nur die JUnit-Files">
		<parallel threadcount="3" failonany="yes">
			<antcall target="junit.jar" />
			<antcall target="junit.source" />
			<sequential>
				<antcall target="junit.javadoc.api" />
				<zip basedir="${tmp.dir}" includes="api/**" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-test-doc-api.zip" />
			</sequential>
			<sequential>
				<antcall target="junit.javadoc.design" />
				<zip basedir="${tmp.dir}" includes="design/**" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-test-doc-design.zip" />
			</sequential>
		</parallel>
		<antcall target="clean" />
	</target>


	<target name="junit.jar" description="Erstellt die Testfälle als jar-File" depends="release.jar">
		<mkdir dir="${tmp.dir}/junit/bin" />
		<javac debug="off" destdir="${tmp.dir}/junit/bin" target="1.5">
			<classpath path="${classpath}:${tmp.dir}/bin:${junit.jar}" />
			<src path="${src.dir.junit}" />
		</javac>
		<jar basedir="${tmp.dir}/junit/bin" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-test.jar" manifest="${tmp.dir}/MANIFEST.MF" excludes="**/package-info.class" index="yes" />
	</target>

	<target name="junit.source" description="Packt die JUnit-Quelldateien">
		<zip basedir="${src.dir.junit}" compress="yes" destfile="${out.dir}/${swe.id}/${swe.id}-test-src.zip" />
	</target>

	<target name="junit.javadoc.api" description="API-Dokumentation für JUnit erstellen">
		<javadoc overview="${src.dir.junit}/overview.html"
		         access="protected"
		         author="true"
		         classpath="${classpath}:${junit.jar}"
		         destdir="${tmp.dir}/api"
		         doctitle="API-Dokumentation für die ${swe.name}"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         packagenames="${swe.id}.*"
		         source="1.5"
		         sourcepath="${src.dir};${src.dir.junit};${src.dir.extra}"
		         splitindex="true"
		         use="true"
		         version="true"
		         link="http://java.sun.com/j2se/1.5.0/docs/api/"
		/>
	</target>

	<target name="junit.javadoc.design" description="Gesamte Dokumentation für JUnit erstellen">
		<javadoc overview="${src.dir.junit}/overview.html"
		         access="private"
		         author="true"
		         classpath="${classpath}:${junit.jar}"
		         destdir="${tmp.dir}/design"
		         doctitle="Design-Dokumentation für die ${swe.name}"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         packagenames="${swe.id}.*"
		         source="1.5"
		         sourcepath="${src.dir};${src.dir.junit};${src.dir.extra}"
		         splitindex="true"
		         use="true"
		         version="true"
		         link="http://java.sun.com/j2se/1.5.0/docs/api/"
		/>
	</target>

	<target name="res" description="Kopiert notwendige Bibliotheken und Dateien">
		<copy todir="${out.dir}/${swe.id}">
			<fileset dir="${res.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

</project>
